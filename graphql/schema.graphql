type Admin {
  id: ID!
  username: String!
  forename: String!
  surname: String!
}

type Teacher {
  id: ID!
  username: String!
  forename: String!
  surname: String!

  teaches(id: ID): [Subject!]!
}

type Pupil {
  id: ID!
  username: String!
  forename: String!
  surname: String!

  appearsIn: [TestResult]!
  className: String
  subjects(id: ID): [Subject!]!
  score(testId: ID!): Float
}

type Class {
  name: String!
  subjects: [Subject]!
  pupils: [Pupil]!
}

type Subject {
  id: ID!
  name: String!

  tests: [Test]!
  pupils: [Pupil!]!
  className: String
  isArchived: Boolean!
}

type Test {
  id: ID!
  name: String!
  date: String!
  subjectName: String!

  score(pupilId: ID!): Float
  pupils: [Pupil!]!
}

type TestResult {
  id: ID!
  name: String!
  date: String!
  subjectId: ID!
  subjectName: String!
  score: Float!
}

type Response {
  success: Boolean!
  message: String
}

type GradeReport {
  subjectId: ID!
  subjectName: String!
  className: String!
  avgGrade: Float!
}

##########################
# Queries
##########################

type Query {
  # Permission: Admin
  admins: [Admin!]!

  # Permission: Admin
  teachers: [Teacher!]!

  # Permission: Admin, Teacher
  pupils: [Pupil!]!

  # Permission: Admin
  classes(name: String): [Class!]!

  # Permission: ALL
  pupil(id: ID!): Pupil

  # Permission: Teacher
  teacher(id: ID!): Teacher

  # Permission: Teacher
  test(id: ID!, teacherId: ID!): Test

  # Permission: Admin
  subjects: [Subject!]!

  gradesheet(pupilId: ID!): [GradeReport!]!
}

##########################
# Mutations
##########################

input InputUserInfo {
  forename: String
  surname: String
}

input InputTest {
  name: String!
  date: String!
}

input InputUser {
  role: String!
  forename: String!
  surname: String!
  username: String!
  password: String!
}

type Mutation {
  # Permission: Pupil, Admin
  editPupilInfo(id: ID!, userInfo: InputUserInfo!): Pupil

  # Permission: Teacher, Admin
  editTeacherInfo(id: ID!, userInfo: InputUserInfo!): Teacher

  # Permission: Admin
  editAdminInfo(id: ID!, userInfo: InputUserInfo!): Teacher

  # Permission: Teacher
  createTest(subjectId: ID!, teacherId: ID!, test: InputTest!): Test

  editTest(id: ID!, subjectId: ID!, teacherId: ID!, test: InputTest!): Test

  editScore(teacherId: ID!, pupilId: ID!, testId: ID!, score: Float!): Float!

  # Permission: Admin
  createUser(adminId: ID!, user: InputUser!): String!

  createClass(adminId: ID!, class: String!): String!

  createSubject(
    adminId: ID!
    class: String!
    teacherId: ID!
    name: String!
  ): Subject

  archiveSubjectByAdmin(adminId: ID!, subjectId: ID!): Subject

  deleteSubject(adminId: ID!, subjectId: ID!): Response!

  assignPupil(adminId: ID!, pupilId: ID!, class: String!): Boolean!

  deassignPupil(adminId: ID!, pupilId: ID!): Boolean!

  # Permission: Teacher
  deleteTest(teacherId: ID!, testId: ID!): Boolean!

  # Permission: Admin
  deletePupil(adminId: ID!, id: ID!): Response!

  deleteTeacher(adminId: ID!, id: ID!): Response!

  deleteClass(adminId: ID!, class: String!): Boolean!
}
